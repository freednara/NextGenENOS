name: NextGenENOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # SFDX CLI version
  SFDX_CLI_VERSION: '2.22.8'
  # Node.js version
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  lint-and-security:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint Analysis
        run: npm run lint

      - name: 🛡️ Security Audit
        run: npm audit --audit-level=moderate

      - name: 📊 Code Coverage Report
        run: npm run test:unit:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false

  # Unit Testing
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run LWC Unit Tests
        run: npm run test:unit

      - name: 📊 Generate Test Report
        run: |
          npm run test:unit:coverage -- --outputFile=./test-results.xml --outputDirectory=./test-results --reporter=junit
        continue-on-error: true

      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: LWC Jest Tests
          path: './test-results/test-results.xml'
          reporter: jest-junit

  # Salesforce Deployment Validation
  salesforce-validation:
    name: 🚀 Salesforce Validation
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests]
    environment: 
      name: validation
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@${{ env.SFDX_CLI_VERSION }}
          sf version

      - name: 🔑 Authorize DevHub
        run: |
          echo "${{ secrets.DEVHUB_JWT_KEY }}" > devhub.key
          sf org login jwt --client-id ${{ secrets.DEVHUB_CONSUMER_KEY }} --jwt-key-file devhub.key --username ${{ secrets.DEVHUB_USERNAME }} --alias devhub --set-default-dev-hub
          rm devhub.key

      - name: 🏗️ Create Scratch Org
        run: |
          sf org create scratch --definition-file config/project-scratch-def.json --alias scratch-org --duration-days 1 --set-default --wait 10

      - name: 📦 Deploy Source to Scratch Org
        run: |
          sf project deploy start --source-dir force-app --wait 20

      - name: 🧪 Run Apex Tests
        run: |
          sf apex run test --test-level RunLocalTests --output-dir ./test-results --result-format human --code-coverage

      - name: 📊 Upload Apex Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: apex-test-results
          path: ./test-results

      - name: 🧹 Cleanup Scratch Org
        if: always()
        run: |
          sf org delete scratch --no-prompt --target-org scratch-org || true

  # Security Scan with PMD
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🛡️ Run PMD Analysis
        uses: pmd/pmd-github-action@v1
        with:
          rulesets: 'config/pmd-ruleset.xml'
          sourcePath: 'force-app/main/default/classes'
          analyzeModifiedFilesOnly: false

      - name: 📊 Upload PMD Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pmd-report.sarif

  # Production Deployment (only on main branch)
  production-deployment:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [salesforce-validation, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://your-production-org.lightning.force.com
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@${{ env.SFDX_CLI_VERSION }}
          sf version

      - name: 🔑 Authorize Production Org
        run: |
          echo "${{ secrets.PROD_JWT_KEY }}" > prod.key
          sf org login jwt --client-id ${{ secrets.PROD_CONSUMER_KEY }} --jwt-key-file prod.key --username ${{ secrets.PROD_USERNAME }} --alias production
          rm prod.key

      - name: 🚀 Deploy to Production
        run: |
          sf project deploy start --source-dir force-app --wait 33 --test-level RunLocalTests

      - name: 📧 Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ NextGenENOS deployed successfully to Production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ NextGenENOS production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Dependency Updates (weekly)
  dependency-update:
    name: 🔄 Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Update dependencies
        run: |
          npm update
          npm audit fix --audit-level=moderate

      - name: 📝 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            This PR contains automated dependency updates:
            
            - Updated npm packages to latest versions
            - Applied security fixes
            
            Please review and merge if tests pass.
          branch: automated-dependency-updates
