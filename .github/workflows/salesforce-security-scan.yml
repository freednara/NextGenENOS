name: Salesforce Security & Code Quality Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Salesforce Code Analyzer Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli
          sfdx --version

      - name: Install Salesforce Code Analyzer
        run: |
          sf plugins install @salesforce/sfdx-scanner
          sf scanner --version
        continue-on-error: true

      - name: Run Security Scan
        run: |
          echo "üîç Running Salesforce Code Analyzer Security Scan..."
          sf scanner:run --target force-app/main/default/classes --format json --outfile security-scan-results.json || echo "Security scan completed with warnings"
        continue-on-error: true

      - name: Run PMD Analysis
        run: |
          echo "üîç Running PMD Code Analysis..."
          sf scanner:run --target force-app/main/default/classes --engine pmd --format json --outfile pmd-results.json || echo "PMD analysis completed with warnings"
        continue-on-error: true

      - name: Run ESLint Analysis
        run: |
          echo "üîç Running ESLint Analysis for LWC..."
          sf scanner:run --target force-app/main/default/lwc --engine eslint --format json --outfile eslint-results.json || echo "ESLint analysis completed with warnings"
        continue-on-error: true

      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            security-scan-results.json
            pmd-results.json
            eslint-results.json

      - name: Check for Critical Security Issues
        run: |
          echo "üö® Checking for critical security issues..."
          if [ -f security-scan-results.json ]; then
            CRITICAL_ISSUES=$(jq -r '.violations[] | select(.severity == 1) | .ruleName' security-scan-results.json | wc -l)
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "‚ùå CRITICAL: Found $CRITICAL_ISSUES security violations"
              echo "Build blocked due to security issues"
              exit 1
            else
              echo "‚úÖ No critical security issues found"
            fi
          fi

      - name: Generate Security Report
        run: |
          echo "üìä Generating Security Report..."
          if [ -f security-scan-results.json ]; then
            TOTAL_VIOLATIONS=$(jq '.violations | length' security-scan-results.json)
            HIGH_VIOLATIONS=$(jq -r '.violations[] | select(.severity == 2) | .ruleName' security-scan-results.json | wc -l)
            MEDIUM_VIOLATIONS=$(jq -r '.violations[] | select(.severity == 3) | .ruleName' security-scan-results.json | wc -l)
            LOW_VIOLATIONS=$(jq -r '.violations[] | select(.severity == 4) | .ruleName' security-scan-results.json | wc -l)
            
            echo "## üîí Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Violations:** $TOTAL_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            echo "- **High Priority:** $HIGH_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium Priority:** $MEDIUM_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            echo "- **Low Priority:** $LOW_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TOTAL_VIOLATIONS" -gt 0 ]; then
              echo "### üö® Security Violations Found:" >> $GITHUB_STEP_SUMMARY
              jq -r '.violations[] | "- **\(.severity):** \(.ruleName) - \(.message)"' security-scan-results.json >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚úÖ No Security Violations Found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Style Check
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier check
        run: npm run prettier:verify

      - name: Run ESLint check
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Generate coverage report
        run: npm run test:unit:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  deployment-gate:
    runs-on: ubuntu-latest
    name: Deployment Gate Check
    needs: [security-scan, code-quality]

    steps:
      - name: Check Security Scan Results
        run: |
          echo "üîí Checking security scan results..."
          if [ -f security-scan-results.json ]; then
            CRITICAL_ISSUES=$(jq -r '.violations[] | select(.severity == 1) | .ruleName' security-scan-results.json | wc -l)
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "‚ùå DEPLOYMENT BLOCKED: Critical security issues found"
              exit 1
            fi
          fi

      - name: Check Code Quality Results
        run: |
          echo "üìä Checking code quality results..."
          # Add any additional quality gates here

      - name: Deployment Approved
        run: |
          echo "‚úÖ All security and quality checks passed"
          echo "üöÄ Deployment approved for production"
